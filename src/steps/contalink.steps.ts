import { Given, When, Then } from "@cucumber/cucumber"; 
// Importa funciones para definir pasos (steps) de Cucumber

import { CustomWorld } from "../support/world"; 
// Importa la clase CustomWorld que extiende el contexto de Cucumber con propiedades y m√©todos personalizados

import { InvoicePage } from "../pages/contalink"; 
// Importa la clase que maneja la l√≥gica de la p√°gina de facturas (Page Object Model)

import { LoginPage } from "../pages/LoginPage"; 
// Importa la clase que maneja la p√°gina de login (Page Object Model)


// Define un step "Given" con un par√°metro {string}, que representa la contrase√±a (o c√≥digo de acceso)
Given('el usuario inicia sesi√≥n con contrase√±a {string}', async function (this: CustomWorld, password: string) {
  // Crea una instancia de LoginPage usando la p√°gina actual de Playwright del contexto `this`
  const loginPage = new LoginPage(this.page);

  // Navega a la p√°gina de login
  await loginPage.goto();

  // Usa el m√©todo de LoginPage para hacer login con el c√≥digo de acceso (password)
  await loginPage.loginWithAccessCode(password);
  // Comentario aclara que el par√°metro "password" es en realidad un c√≥digo de acceso
});


// Define un step "When" con un par√°metro {string} y un timeout personalizado de 30 segundos
When(
  'hace clic en {string}',
  { timeout: 30 * 1000 },

  // Funci√≥n asincr√≥nica que se ejecuta cuando el step coincide
  async function (buttonName: string) {
    // Log en consola para indicar qu√© bot√≥n se intenta clickear
    console.log(`‚û°Ô∏è Intentando hacer clic en "${buttonName}"`);

    // Condicional para manejar el bot√≥n "Nueva factura"
    if (buttonName === "Nueva factura") {
      // Usa la instancia this.invoicePage ya creada para hacer click en "Nueva factura"
      await this.invoicePage.clickNuevaFactura();

      // Log que confirma que el click se complet√≥ exitosamente
      console.log(`‚úÖ Click en "${buttonName}" completado`);
    } else {
      // Si el bot√≥n no est√° implementado en el step, lanza un error para evitar pasos inv√°lidos
      throw new Error(`Bot√≥n "${buttonName}" no implementado en step`);
    }
  }
);

Then(
  // ‚úÖ Expresi√≥n regular que valida el texto completo del step y captura 3 valores:
  // - El n√∫mero del folio (solo d√≠gitos)
  // - El total en formato flexible: permite decimales y comas
  // - El estado, con o sin comillas
  /^captura la factura FAC-(\d+) con total \$([0-9.,]+) y estado "?([^"]+)"?$/,

  // ‚úÖ Opcional: timeout personalizado de 20 segundos para este step
  { timeout: 20 * 1000 },

  // ‚úÖ Funci√≥n asincr√≥nica que ser√° ejecutada si el texto del step coincide con el patr√≥n regex
  async function (
    this: CustomWorld,     // üîß Contexto compartido de Cucumber para acceder al navegador y a tus pages
    folioPart: string,     // üì¶ Grupo 1 del regex: solo la parte num√©rica del folio, ejemplo: "7081986"
    total: string,         // üí∞ Grupo 2 del regex: total capturado como string, ej. "1200", "1,200.00"
    estado: string         // üè∑Ô∏è Grupo 3 del regex: estado capturado, con o sin comillas, ej. "Vigente"
  ) {
    // üîß Reconstruimos el folio completo, agregando el prefijo "FAC-"
    const folio = `FAC-${folioPart}`;

    // üßæ Logueamos la informaci√≥n capturada para depuraci√≥n
    console.log(`üìù Capturando factura: ${folio}, Total: ${total}, Estado: ${estado}`);

    // üß™ Llamamos al m√©todo del Page Object para realizar la acci√≥n en la interfaz
    await this.invoicePage.capturarFactura(folio, total, estado);

    // ‚úÖ Confirmamos que la acci√≥n se complet√≥ exitosamente
    console.log("‚úÖ Factura capturada correctamente");
  }
);

When("confirma la creaci√≥n", async function (this: CustomWorld) {
  // Usa la instancia de InvoicePage que ya est√° creada en this.invoicePage
  // para evitar crear una nueva instancia innecesaria
  await this.invoicePage.confirmarCreacion();
});

Then(
  "la factura {string} debe aparecer en los resultados de b√∫squeda",
  { timeout: 20 * 1000 }, // Timeout personalizado de 20 segundos para este step
  async function (this: CustomWorld, folio: string) {
    // Crea una nueva instancia de InvoicePage con la p√°gina actual
    const invoicePage = new InvoicePage(this.page);
    // Llama al m√©todo para verificar que la factura con el folio dado aparece en la lista
    await invoicePage.verificarFacturaEnLista(folio);
  }
);

When(
  'elimina la factura {string}',
  { timeout: 70 * 1000 }, // Timeout de 70 segundos para este paso, considerando que puede tomar m√°s tiempo
  async function (this: CustomWorld, folio: string) {
    // Crea una instancia de InvoicePage para manipular la p√°gina
    const invoicePage = new InvoicePage(this.page);
    // Ejecuta la funci√≥n para eliminar todas las facturas con ese folio
    await invoicePage.eliminarTodasLasFacturas(folio);
  }
);

Then("la factura {string} ya no deber√≠a estar visible en la lista", async function (this: CustomWorld, folio: string) {
  // Nueva instancia de InvoicePage para verificar la visibilidad
  const invoicePage = new InvoicePage(this.page);
  // Verifica que la factura con el folio dado ya no est√© visible en la lista
  await invoicePage.verificarFacturaNoVisible(folio);
});